#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// chameleon.core.expression.VariableReference
	c8369 [label=<<table title="chameleon.core.expression.VariableReference" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VariableReference.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VariableReference </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.VariableOrTypeReference
	c8370 [label=<<table title="chameleon.core.expression.VariableOrTypeReference" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VariableOrTypeReference.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VariableOrTypeReference </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Literal<E extends chameleon.core.expression.Literal>
	c8374 [label=<<table title="chameleon.core.expression.Literal" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Literal.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Literal&lt;E extends Literal&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.InvocationTarget<E extends chameleon.core.expression.InvocationTarget, P extends chameleon.core.element.Element>
	c8376 [label=<<table title="chameleon.core.expression.InvocationTarget" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./InvocationTarget.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> InvocationTarget&lt;E extends InvocationTarget, P extends Element&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Invocation<E extends chameleon.core.expression.Invocation, D extends chameleon.core.method.Method>
	c8377 [label=<<table title="chameleon.core.expression.Invocation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Invocation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Invocation&lt;E extends Invocation, D extends Method&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Expression<E extends chameleon.core.expression.Expression>
	c8378 [label=<<table title="chameleon.core.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression&lt;E extends Expression&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.BinaryExpression
	c8379 [label=<<table title="chameleon.core.expression.BinaryExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BinaryExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> BinaryExpression </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//chameleon.core.expression.VariableReference extends chameleon.core.expression.Expression<chameleon.core.expression.VariableReference>
	c8378:p -> c8369:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.VariableOrTypeReference extends chameleon.core.expression.Expression<chameleon.core.expression.VariableOrTypeReference>
	c8378:p -> c8370:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.Literal<E extends chameleon.core.expression.Literal> extends chameleon.core.expression.Expression<E>
	c8378:p -> c8374:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.Invocation<E extends chameleon.core.expression.Invocation, D extends chameleon.core.method.Method> extends chameleon.core.expression.Expression<E>
	c8378:p -> c8377:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.Expression<E extends chameleon.core.expression.Expression> extends chameleon.core.expression.InvocationTarget<E, chameleon.core.element.Element>
	c8376:p -> c8378:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.BinaryExpression extends chameleon.core.expression.Expression<chameleon.core.expression.BinaryExpression>
	c8378:p -> c8379:p [dir=back,arrowtail=empty];
}

