#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// chameleon.core.type.Variance
	c3458 [label=<<table title="chameleon.core.type.Variance" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Variance.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Variance </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.VariableOrType<E extends chameleon.core.type.VariableOrType<E, P, S, F>, P extends chameleon.core.declaration.DeclarationContainer, S extends chameleon.core.declaration.Signature, F extends chameleon.core.declaration.Declaration>
	c3459 [label=<<table title="chameleon.core.type.VariableOrType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VariableOrType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> VariableOrType&lt;E extends VariableOrType&lt;E, P, S, F&gt;, P extends DeclarationContainer, S extends Signature, F extends Declaration&gt; </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.TypeReference
	c3460 [label=<<table title="chameleon.core.type.TypeReference" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TypeReference.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TypeReference </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.TypeListener
	c3461 [label=<<table title="chameleon.core.type.TypeListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TypeListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> TypeListener </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.TypeIndirection
	c3462 [label=<<table title="chameleon.core.type.TypeIndirection" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TypeIndirection.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> TypeIndirection </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.TypeElementImpl<E extends chameleon.core.type.TypeElementImpl<E, P>, P extends chameleon.core.element.Element>
	c3463 [label=<<table title="chameleon.core.type.TypeElementImpl" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TypeElementImpl.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> TypeElementImpl&lt;E extends TypeElementImpl&lt;E, P&gt;, P extends Element&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.TypeElement<E extends chameleon.core.type.TypeElement<E, P>, P extends chameleon.core.element.Element>
	c3464 [label=<<table title="chameleon.core.type.TypeElement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TypeElement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> TypeElement&lt;E extends TypeElement&lt;E, P&gt;, P extends Element&gt; </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.TypeAlias
	c3465 [label=<<table title="chameleon.core.type.TypeAlias" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TypeAlias.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TypeAlias </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.Type
	c3466 [label=<<table title="chameleon.core.type.Type" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Type.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Type </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.Type.LocalInheritanceLookupStrategy
	c3467 [label=<<table title="chameleon.core.type.Type.LocalInheritanceLookupStrategy" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Type.LocalInheritanceLookupStrategy.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LocalInheritanceLookupStrategy </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.StubTypeElement<E extends chameleon.core.type.StubTypeElement>
	c3468 [label=<<table title="chameleon.core.type.StubTypeElement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StubTypeElement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> StubTypeElement&lt;E extends StubTypeElement&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.RegularType
	c3469 [label=<<table title="chameleon.core.type.RegularType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RegularType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RegularType </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.IntersectionType
	c3470 [label=<<table title="chameleon.core.type.IntersectionType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./IntersectionType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> IntersectionType </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.DerivedType
	c3471 [label=<<table title="chameleon.core.type.DerivedType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DerivedType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DerivedType </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.ConstructedType
	c3472 [label=<<table title="chameleon.core.type.ConstructedType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ConstructedType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstructedType </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.type.ClassBody
	c3473 [label=<<table title="chameleon.core.type.ClassBody" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ClassBody.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ClassBody </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//chameleon.core.type.TypeIndirection extends chameleon.core.type.Type
	c3466:p -> c3462:p [dir=back,arrowtail=empty];
	//chameleon.core.type.TypeElementImpl<E extends chameleon.core.type.TypeElementImpl<E, P>, P extends chameleon.core.element.Element> implements chameleon.core.type.TypeElement<E extends chameleon.core.type.TypeElement<E, P>, P extends chameleon.core.element.Element>
	c3464:p -> c3463:p [dir=back,arrowtail=empty,style=dashed];
	//chameleon.core.type.TypeAlias extends chameleon.core.type.TypeIndirection
	c3462:p -> c3465:p [dir=back,arrowtail=empty];
	//chameleon.core.type.Type implements chameleon.core.type.VariableOrType<E extends chameleon.core.type.VariableOrType<E, P, S, F>, P extends chameleon.core.declaration.DeclarationContainer, S extends chameleon.core.declaration.Signature, F extends chameleon.core.declaration.Declaration>
	c3459:p -> c3466:p [dir=back,arrowtail=empty,style=dashed];
	//chameleon.core.type.RegularType extends chameleon.core.type.Type
	c3466:p -> c3469:p [dir=back,arrowtail=empty];
	//chameleon.core.type.IntersectionType extends chameleon.core.type.Type
	c3466:p -> c3470:p [dir=back,arrowtail=empty];
	//chameleon.core.type.DerivedType extends chameleon.core.type.RegularType
	c3469:p -> c3471:p [dir=back,arrowtail=empty];
	//chameleon.core.type.ConstructedType extends chameleon.core.type.TypeIndirection
	c3462:p -> c3472:p [dir=back,arrowtail=empty];
}

