#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.2 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// chameleon.core.expression.VariableReference
	c850 [label=<<table title="chameleon.core.expression.VariableReference" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VariableReference.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VariableReference </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.VariableOrTypeReference
	c851 [label=<<table title="chameleon.core.expression.VariableOrTypeReference" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VariableOrTypeReference.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VariableOrTypeReference </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.StubExpressionContainer
	c852 [label=<<table title="chameleon.core.expression.StubExpressionContainer" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StubExpressionContainer.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StubExpressionContainer </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.NonConstructorInvocation<E extends chameleon.core.expression.NonConstructorInvocation, D extends chameleon.core.method.Method>
	c853 [label=<<table title="chameleon.core.expression.NonConstructorInvocation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NonConstructorInvocation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> NonConstructorInvocation&lt;E extends NonConstructorInvocation, D extends Method&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.NamedTarget
	c854 [label=<<table title="chameleon.core.expression.NamedTarget" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NamedTarget.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NamedTarget </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Literal<E extends chameleon.core.expression.Literal>
	c855 [label=<<table title="chameleon.core.expression.Literal" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Literal.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Literal&lt;E extends Literal&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.InvocationTargetWithTarget<E extends chameleon.core.expression.InvocationTargetWithTarget>
	c856 [label=<<table title="chameleon.core.expression.InvocationTargetWithTarget" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./InvocationTargetWithTarget.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> InvocationTargetWithTarget&lt;E extends InvocationTargetWithTarget&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.InvocationTarget<E extends chameleon.core.expression.InvocationTarget, P extends chameleon.core.element.Element>
	c857 [label=<<table title="chameleon.core.expression.InvocationTarget" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./InvocationTarget.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> InvocationTarget&lt;E extends InvocationTarget, P extends Element&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Invocation<E extends chameleon.core.expression.Invocation, D extends chameleon.core.method.Method>
	c858 [label=<<table title="chameleon.core.expression.Invocation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Invocation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Invocation&lt;E extends Invocation, D extends Method&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Expression<E extends chameleon.core.expression.Expression>
	c859 [label=<<table title="chameleon.core.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression&lt;E extends Expression&gt; </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.BinaryExpression
	c860 [label=<<table title="chameleon.core.expression.BinaryExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BinaryExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> BinaryExpression </font></td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.Assignable<E extends chameleon.core.expression.Assignable, P extends chameleon.core.element.Element>
	c861 [label=<<table title="chameleon.core.expression.Assignable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Assignable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Assignable&lt;E extends Assignable, P extends Element&gt; </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.ActualArgumentList
	c862 [label=<<table title="chameleon.core.expression.ActualArgumentList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ActualArgumentList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ActualArgumentList </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// chameleon.core.expression.ActualArgument
	c863 [label=<<table title="chameleon.core.expression.ActualArgument" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ActualArgument.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ActualArgument </td></tr>
		</table></td></tr>
		</table>>, fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//chameleon.core.expression.VariableReference extends chameleon.core.expression.Expression<chameleon.core.expression.VariableReference>
	c859:p -> c850:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.VariableReference implements chameleon.core.expression.Assignable<E extends chameleon.core.expression.Assignable, P extends chameleon.core.element.Element>
	c861:p -> c850:p [dir=back,arrowtail=empty,style=dashed];
	//chameleon.core.expression.VariableOrTypeReference extends chameleon.core.expression.Expression<chameleon.core.expression.VariableOrTypeReference>
	c859:p -> c851:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.VariableOrTypeReference implements chameleon.core.expression.Assignable<E extends chameleon.core.expression.Assignable, P extends chameleon.core.element.Element>
	c861:p -> c851:p [dir=back,arrowtail=empty,style=dashed];
	//chameleon.core.expression.NonConstructorInvocation<E extends chameleon.core.expression.NonConstructorInvocation, D extends chameleon.core.method.Method> extends chameleon.core.expression.Invocation<E, D>
	c858:p -> c853:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.NamedTarget extends chameleon.core.expression.InvocationTargetWithTarget<chameleon.core.expression.NamedTarget>
	c856:p -> c854:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.Literal<E extends chameleon.core.expression.Literal> extends chameleon.core.expression.Expression<E>
	c859:p -> c855:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.InvocationTargetWithTarget<E extends chameleon.core.expression.InvocationTargetWithTarget> extends chameleon.core.expression.InvocationTarget<E, chameleon.core.element.Element>
	c857:p -> c856:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.Invocation<E extends chameleon.core.expression.Invocation, D extends chameleon.core.method.Method> extends chameleon.core.expression.Expression<E>
	c859:p -> c858:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.Expression<E extends chameleon.core.expression.Expression> extends chameleon.core.expression.InvocationTarget<E, chameleon.core.element.Element>
	c857:p -> c859:p [dir=back,arrowtail=empty];
	//chameleon.core.expression.BinaryExpression extends chameleon.core.expression.Expression<chameleon.core.expression.BinaryExpression>
	c859:p -> c860:p [dir=back,arrowtail=empty];
}

